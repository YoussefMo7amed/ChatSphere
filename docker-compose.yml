version: "3.8"

services:
  app:
    build:
      context: .
    container_name: chat-sys
    ports:
      - "3000:3000"
    stdin_open: true # Keep STDIN open for interaction
    tty: true # Allocate a pseudo-TTY
    volumes:
      - .:/project
    command: ["npx", "nodemon", "./index.js"] # Command to run the application
    environment:
      NODE_ENV: development
      DATABASE_URL: mysql://app_user:app_password@db:3306/chat_db
      REDIS_URL: redis://redis:6379
      ELASTIC_URL: http://elasticsearch:9200
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmqL:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - frontend-net
      - backend-net

  db:
    image: mysql:8
    container_name: mysql_db
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - backend-net
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: chat_db
      MYSQL_USER: app_user
      MYSQL_PASSWORD: app_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7.4.1
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.13
    container_name: elasticsearch
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - backend-net
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  rabbitmq:
    image: rabbitmq:4.0-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672" 
      - "15672:15672" 
    networks:
      - backend-net
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"] 
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  frontend-net:
  backend-net:
    internal: true

volumes:
  db_data:
  redis_data:
  es_data:
